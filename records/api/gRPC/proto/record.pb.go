// Code generated by protoc-gen-go. DO NOT EDIT.
// source: record.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Record struct {
	UniqueID             string               `protobuf:"bytes,1,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
	Content              []byte               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	SourceURL            string               `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	AddedAt              *timestamp.Timestamp `protobuf:"bytes,4,opt,name=addedAt,proto3" json:"addedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf94fd919e302a1d, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *Record) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Record) GetSourceURL() string {
	if m != nil {
		return m.SourceURL
	}
	return ""
}

func (m *Record) GetAddedAt() *timestamp.Timestamp {
	if m != nil {
		return m.AddedAt
	}
	return nil
}

type RecordFilter struct {
	RecordID             []string `protobuf:"bytes,1,rep,name=recordID,proto3" json:"recordID,omitempty"`
	TopicID              []string `protobuf:"bytes,2,rep,name=topicID,proto3" json:"topicID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordFilter) Reset()         { *m = RecordFilter{} }
func (m *RecordFilter) String() string { return proto.CompactTextString(m) }
func (*RecordFilter) ProtoMessage()    {}
func (*RecordFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf94fd919e302a1d, []int{1}
}

func (m *RecordFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordFilter.Unmarshal(m, b)
}
func (m *RecordFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordFilter.Marshal(b, m, deterministic)
}
func (m *RecordFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordFilter.Merge(m, src)
}
func (m *RecordFilter) XXX_Size() int {
	return xxx_messageInfo_RecordFilter.Size(m)
}
func (m *RecordFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordFilter.DiscardUnknown(m)
}

var xxx_messageInfo_RecordFilter proto.InternalMessageInfo

func (m *RecordFilter) GetRecordID() []string {
	if m != nil {
		return m.RecordID
	}
	return nil
}

func (m *RecordFilter) GetTopicID() []string {
	if m != nil {
		return m.TopicID
	}
	return nil
}

type RecordResponse struct {
	Records              []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Count                int64     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RecordResponse) Reset()         { *m = RecordResponse{} }
func (m *RecordResponse) String() string { return proto.CompactTextString(m) }
func (*RecordResponse) ProtoMessage()    {}
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf94fd919e302a1d, []int{2}
}

func (m *RecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordResponse.Unmarshal(m, b)
}
func (m *RecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordResponse.Marshal(b, m, deterministic)
}
func (m *RecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordResponse.Merge(m, src)
}
func (m *RecordResponse) XXX_Size() int {
	return xxx_messageInfo_RecordResponse.Size(m)
}
func (m *RecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordResponse proto.InternalMessageInfo

func (m *RecordResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *RecordResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Record)(nil), "proto.Record")
	proto.RegisterType((*RecordFilter)(nil), "proto.RecordFilter")
	proto.RegisterType((*RecordResponse)(nil), "proto.RecordResponse")
}

func init() { proto.RegisterFile("record.proto", fileDescriptor_bf94fd919e302a1d) }

var fileDescriptor_bf94fd919e302a1d = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0x34, 0xfd, 0xf3, 0xf5, 0xb6, 0x75, 0x31, 0x2a, 0x84, 0x20, 0x58, 0xb2, 0xb1,
	0x9b, 0x26, 0x90, 0x56, 0xf7, 0x6a, 0x54, 0x0a, 0x82, 0x12, 0x75, 0xe3, 0x2e, 0x9d, 0x5c, 0xdb,
	0x81, 0x36, 0x13, 0x93, 0x1b, 0xc1, 0xd7, 0xd0, 0x17, 0x96, 0xcc, 0x74, 0x94, 0x6e, 0xc4, 0xae,
	0x26, 0x27, 0xf7, 0x9c, 0xc3, 0xef, 0x26, 0x03, 0xfd, 0x02, 0xb9, 0x2c, 0x52, 0x3f, 0x2f, 0x24,
	0x49, 0xd6, 0x52, 0x87, 0x7b, 0xbc, 0x90, 0x72, 0xb1, 0xc2, 0x40, 0xa9, 0x79, 0xf5, 0x12, 0x90,
	0x58, 0x63, 0x49, 0xc9, 0x3a, 0xd7, 0x3e, 0xef, 0xc3, 0x82, 0x76, 0xac, 0x82, 0xcc, 0x85, 0xff,
	0x55, 0x26, 0x5e, 0x2b, 0x9c, 0x45, 0x8e, 0x35, 0xb4, 0x46, 0xdd, 0xf8, 0x5b, 0x33, 0x07, 0x3a,
	0x5c, 0x66, 0x84, 0x19, 0x39, 0x8d, 0xa1, 0x35, 0xea, 0xc7, 0x46, 0xb2, 0x23, 0xe8, 0x96, 0xb2,
	0x2a, 0x38, 0x3e, 0xc5, 0xb7, 0x8e, 0xad, 0x62, 0x3f, 0x2f, 0xd8, 0x14, 0x3a, 0x49, 0x9a, 0x62,
	0x7a, 0x4e, 0x4e, 0x73, 0x68, 0x8d, 0x7a, 0xa1, 0xeb, 0x6b, 0x22, 0xdf, 0x10, 0xf9, 0x8f, 0x86,
	0x28, 0x36, 0x56, 0x2f, 0x82, 0xbe, 0x66, 0xba, 0x16, 0x2b, 0xc2, 0xa2, 0x26, 0xd3, 0xcb, 0x29,
	0x32, 0xbb, 0x26, 0x33, 0xba, 0x26, 0x23, 0x99, 0x0b, 0x3e, 0x8b, 0x9c, 0x86, 0x1a, 0x19, 0xe9,
	0xdd, 0xc1, 0x9e, 0x6e, 0x89, 0xb1, 0xcc, 0x65, 0x56, 0x22, 0x3b, 0x81, 0x8e, 0xce, 0x95, 0xaa,
	0xa6, 0x17, 0x0e, 0x34, 0x86, 0xbf, 0xf1, 0x99, 0x29, 0x3b, 0x80, 0x16, 0x97, 0xd5, 0x66, 0x59,
	0x3b, 0xd6, 0x22, 0xfc, 0x6c, 0xc0, 0x40, 0x3b, 0x1f, 0xb0, 0x78, 0x13, 0x1c, 0xd9, 0x04, 0xec,
	0x1b, 0x24, 0xb6, 0xbf, 0x55, 0xa3, 0xa1, 0xdd, 0xc3, 0xed, 0xee, 0x0d, 0x83, 0xf7, 0x8f, 0x9d,
	0x42, 0xeb, 0xb2, 0xee, 0xdb, 0x31, 0xe6, 0x43, 0xf3, 0x5e, 0x96, 0xc4, 0xb6, 0x99, 0x7f, 0xf5,
	0x5f, 0xa5, 0xe2, 0xef, 0xfe, 0x33, 0x68, 0x47, 0xb8, 0x42, 0xc2, 0xdd, 0xb8, 0x2e, 0xa6, 0xcf,
	0xe1, 0x42, 0xd0, 0xb2, 0x9a, 0xfb, 0x5c, 0xae, 0xeb, 0xfb, 0x25, 0x69, 0x39, 0x7e, 0x0f, 0x4a,
	0x5e, 0x24, 0x79, 0x26, 0x09, 0xc7, 0x49, 0x2e, 0x02, 0xfd, 0x61, 0x83, 0xfa, 0x51, 0xff, 0xf8,
	0xb6, 0x3a, 0x26, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xeb, 0x87, 0x2b, 0xb6, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordServiceClient interface {
	Get(ctx context.Context, in *RecordFilter, opts ...grpc.CallOption) (*RecordResponse, error)
	Count(ctx context.Context, in *RecordFilter, opts ...grpc.CallOption) (*RecordResponse, error)
	Post(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RecordResponse, error)
	Edit(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RecordResponse, error)
	Delete(ctx context.Context, in *RecordFilter, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordServiceClient struct {
	cc *grpc.ClientConn
}

func NewRecordServiceClient(cc *grpc.ClientConn) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) Get(ctx context.Context, in *RecordFilter, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Count(ctx context.Context, in *RecordFilter, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Post(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordService/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Edit(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Delete(ctx context.Context, in *RecordFilter, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
type RecordServiceServer interface {
	Get(context.Context, *RecordFilter) (*RecordResponse, error)
	Count(context.Context, *RecordFilter) (*RecordResponse, error)
	Post(context.Context, *Record) (*RecordResponse, error)
	Edit(context.Context, *Record) (*RecordResponse, error)
	Delete(context.Context, *RecordFilter) (*RecordResponse, error)
}

// UnimplementedRecordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (*UnimplementedRecordServiceServer) Get(ctx context.Context, req *RecordFilter) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRecordServiceServer) Count(ctx context.Context, req *RecordFilter) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedRecordServiceServer) Post(ctx context.Context, req *Record) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (*UnimplementedRecordServiceServer) Edit(ctx context.Context, req *Record) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedRecordServiceServer) Delete(ctx context.Context, req *RecordFilter) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRecordServiceServer(s *grpc.Server, srv RecordServiceServer) {
	s.RegisterService(&_RecordService_serviceDesc, srv)
}

func _RecordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Get(ctx, req.(*RecordFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Count(ctx, req.(*RecordFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordService/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Post(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Edit(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Delete(ctx, req.(*RecordFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RecordService_Get_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _RecordService_Count_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _RecordService_Post_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _RecordService_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RecordService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "record.proto",
}
